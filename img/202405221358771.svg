<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" id="mind-svg-con" version="1.1" width="1572px" height="1281px" style="position: absolute; left: 0px; top: 0px; width: 1572px; height: 1281px; background: rgb(251, 245, 224); z-index: 999;"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="1572" height="1281" fill="#FBF5E0"></rect></g><g transform="translate(-9894, -9304.5)" id="sdjakdjak5"><defs></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_9e90b1e934cd5d38" d="M 10000 9945 L 10106 9945 L 10106 9480.5 A 8 8 0 0 1 10114 9472.5 L 10136 9472.5" stroke="#6C8C78" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_d41278eccfd5d3b4" d="M 10000 9945 L 10106 9945 L 10106 9654.296875 A 8 8 0 0 1 10114 9646.296875 L 10136 9646.296875" stroke="#6C8C78" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_494c68b61e12db31" d="M 10000 9945 L 10106 9945 L 10106 9706.296875 A 8 8 0 0 1 10114 9698.296875 L 10136 9698.296875" stroke="#6C8C78" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_ec6cf7cd8dad961d" d="M 10000 9945 L 10106 9945 L 10106 10136.78125 A 8 8 0 0 0 10114 10144.78125 L 10136 10144.78125" stroke="#6C8C78" fill="none" stroke-width="2"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g><g class="svg-freebos-con" transform="translate(0.5,0.5)"></g></g><g id="ec6cf7cd8dad961d"><rect x="242" y="824.484375" rx="16" ry="16" width="178" height="32" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:14px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="254" y="844"><tspan dx="0">对象访问方式主要有两种</tspan></tspan></text></g></g><g id="d8ea73522f4fa506"><rect x="456" y="639.6875" rx="1px" ry="1px" width="66" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="465" y="655.1600000000001"><tspan dx="0">句柄访问</tspan></tspan></text></g></g><g id="119defef3e24d6c6"><rect x="558" y="554.5" rx="1px" ry="1px" width="42" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="567" y="570.1600000000001"><tspan dx="0">图示</tspan></tspan></text></g></g><g id="56b1745d47f7f0cd"><rect x="636" y="430" rx="1px" ry="1px" width="508" height="275" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn.processon.com/659075849306be2fed0d515e-664d866e78868c32f669c50a.svg?e=1716360318&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:RNpUlozXIWpM6sWOD9wM1zQZ5K4=" transform="translate(645, 434)" width="490" height="237"></image><a href="https://www.processon.com/diagraming/6649de68a159081f4f9f1aa7" target="_blank" style="cursor:pointer;"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.processon.com/v5_editor/static/images/link.svg" transform="translate(1115, 681)" width="20" height="21"></image></a></g><g id="d13bb22044c1c44e"><rect x="558" y="747.9921875" rx="1px" ry="1px" width="42" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="567" y="763.1600000000001"><tspan dx="0">实现</tspan></tspan></text></g></g><g id="75e0bc5b22cc8efc"><rect x="636" y="715" rx="1px" ry="1px" width="593" height="92" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="645" y="730.1600000000001"><tspan dx="0">1. 句柄池: JVM 会在堆中专门开辟一块区域作为句柄池，用来存储所有对象的句柄。</tspan></tspan><tspan x="645" y="746.1200000000001"><tspan dx="0">2. 句柄结构: 每个句柄包含两个部分：</tspan></tspan><tspan x="645" y="762.0800000000002"><tspan dx="0">3. 对象地址: 指向堆中实际对象的地址。</tspan></tspan><tspan x="645" y="778.0400000000002"><tspan dx="0">4. 类型指针: 指向方法区中该对象类型信息的地址。</tspan></tspan><tspan x="645" y="794.0000000000002"><tspan dx="0">5. 访问对象: 当需要访问一个对象时，JVM 会先找到句柄池中对应的句柄，然后根据句柄中的地址找到对象。</tspan></tspan></text></g></g><g id="b26187e937f7ff5b"><rect x="558" y="832.1796875" rx="1px" ry="1px" width="68" height="28" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="567" y="848.1600000000001"><tspan dx="0">好处</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.processon.com/v5_editor/static/images/note.svg" transform="translate(597, 836.1796875)" width="20" height="20"></image></g><g id="43584e100fe4489b"><rect x="662" y="816.984375" rx="1px" ry="1px" width="880" height="58" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="671" y="832.1600000000001"><tspan dx="0">1. 稳定性: 句柄访问方式将对象的地址和类型信息分离，当对象被移动时，只需要更新句柄中的对象地址即可，而不需要修改引用变量，提高了程序的稳定性。</tspan></tspan><tspan x="671" y="848.1200000000001"><tspan dx="0">2. 安全性: 句柄访问方式可以更好地控制对象的访问权限，通过句柄可以限制对对象的访问，提高了程序的安全性。</tspan></tspan><tspan x="671" y="864.0800000000002"><tspan dx="0">3. 灵活性: 句柄访问方式可以方便地实现对象的动态绑定，例如，在运行时根据类型信息选择不同的方法执行。</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.processon.com/v5_editor/static/images/note.svg" transform="translate(1513.015625, 836.1796875)" width="20" height="20"></image></g><g id="b6decff382c8e8eb"><rect x="456" y="1054.96875" rx="1px" ry="1px" width="143" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="465" y="1070.16"><tspan dx="0">直接指针(Hopspot采用)</tspan></tspan></text></g></g><g id="e80b8849e12b691e"><rect x="634.6875" y="1003.375" rx="1px" ry="1px" width="42" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="644" y="1018.1600000000001"><tspan dx="0">图示</tspan></tspan></text></g></g><g id="93d8e7699828b34e"><rect x="712.6875" y="885.375" rx="1px" ry="1px" width="481" height="262" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn.processon.com/659075849306be2fed0d515e-664d872078868c32f669c522.svg?e=1716360496&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ETt3g5_-hJUIO_ji1qBkgL1kQ8k=" transform="translate(721.6875, 889.375)" width="463" height="224"></image><a href="https://www.processon.com/diagraming/6649e159cfe67e27899c3eab" target="_blank" style="cursor:pointer;"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.processon.com/v5_editor/static/images/link.svg" transform="translate(1164.6875, 1123.375)" width="20" height="21"></image></a></g><g id="672fc72ed7b8f60c"><rect x="634.6875" y="1165.171875" rx="1px" ry="1px" width="42" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="644" y="1180.16"><tspan dx="0">实现</tspan></tspan></text></g></g><g id="e8eee4628d5c334e"><rect x="712.6875" y="1157.375" rx="1px" ry="1px" width="461" height="42" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="722" y="1172.16"><tspan dx="0">1. 指针存储: 引用变量直接存储对象的内存地址。</tspan></tspan><tspan x="722" y="1188.1200000000001"><tspan dx="0">2. 访问对象: 当需要访问一个对象时，JVM 会直接根据引用变量中的地址找到对象。</tspan></tspan></text></g></g><g id="973c2790e213363c"><rect x="634.6875" y="1215.765625" rx="1px" ry="1px" width="68" height="28" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="644" y="1232.16"><tspan dx="0">好处</tspan></tspan></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.processon.com/v5_editor/static/images/note.svg" transform="translate(673.6875, 1219.765625)" width="20" height="20"></image></g><g id="1df1a4f6d743ffc5"><rect x="738.6875" y="1208.96875" rx="1px" ry="1px" width="458" height="42" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="748" y="1224.16"><tspan dx="0">1. 访问速度快: 直接指针访问方式不需要额外的间接访问，因此访问速度更快。</tspan></tspan><tspan x="748" y="1240.1200000000001"><tspan dx="0">2. 内存占用少: 直接指针访问方式不需要额外的句柄存储空间，因此内存占用更少。</tspan></tspan></text></g></g><g id="494c68b61e12db31"><rect x="242" y="378" rx="16" ry="16" width="430" height="32" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:14px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="254" y="398"><tspan dx="0">JVM是如何通过栈帧中的对象引用访问到其内部的对象实例的呢？</tspan></tspan></text></g></g><g id="f91793a4f53cf786"><rect x="708" y="380.796875" rx="1px" ry="1px" width="177" height="26" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="717" y="396.15999999999997"><tspan dx="0">定位，通过栈上reference访问</tspan></tspan></text></g></g><g id="d41278eccfd5d3b4"><rect x="242" y="326" rx="16" ry="16" width="206" height="32" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:14px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="254" y="346"><tspan dx="0">创建对象的目的是为了使用它</tspan></tspan></text></g></g><g id="9e90b1e934cd5d38"><rect x="242" y="152.203125" rx="16" ry="16" width="52" height="32" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="14px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:14px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"><tspan x="254" y="172"><tspan dx="0">图示</tspan></tspan></text></g></g><g id="5ffa2de8ec7b6375"><rect x="330" y="30" rx="1px" ry="1px" width="397" height="276" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="12px" font-weight="normal" fill="rgb(70, 99, 80)" style="font-size:12px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#466350;font-style:normal;text-align:left;font-weight:normal;"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn.processon.com/659075849306be2fed0d515e-664d85b125897e365db71ac7.svg?e=1716360129&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:D-veFl7P_aclpWK0FGKrhHdQCpA=" transform="translate(339, 34)" width="379" height="238"></image><a href="https://www.processon.com/diagraming/6649dd9a8a5b1455e79b485a" target="_blank" style="cursor:pointer;"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.processon.com/v5_editor/static/images/link.svg" transform="translate(698, 282)" width="20" height="21"></image></a></g><g transform="translate(242, 430)" id="sdjakdjak0"><g id="subline_ec6cf7cd8dad961d" transform="translate(0.5, 0.5)"><path id="line_d8ea73522f4fa506" d="M 178 410.28125 L 196 410.28125 L 196 226.6875 A 4 4 0 0 1 200 222.6875 L 214 222.6875" p="ec6cf7cd8dad961d" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_119defef3e24d6c6" d="M 280 222.6875 L 298 222.6875 L 298 141.5 A 4 4 0 0 1 302 137.5 L 316 137.5" p="d8ea73522f4fa506" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_56b1745d47f7f0cd" d="M 358 137.5 L 376 137.5 L 376 137.5 L 394 137.5" p="119defef3e24d6c6" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_d13bb22044c1c44e" d="M 280 222.6875 L 298 222.6875 L 298 326.9921875 A 4 4 0 0 0 302 330.9921875 L 316 330.9921875" p="d8ea73522f4fa506" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_75e0bc5b22cc8efc" d="M 358 330.9921875 L 376 330.9921875 L 376 330.9921875 L 394 330.9921875" p="d13bb22044c1c44e" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_b26187e937f7ff5b" d="M 280 222.6875 L 298 222.6875 L 298 412.1796875 A 4 4 0 0 0 302 416.1796875 L 316 416.1796875" p="d8ea73522f4fa506" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_43584e100fe4489b" d="M 384 416.1796875 L 402 416.1796875 L 402 416.1796875 L 420 416.1796875" p="b26187e937f7ff5b" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_b6decff382c8e8eb" d="M 178 410.28125 L 196 410.28125 L 196 633.96875 A 4 4 0 0 0 200 637.96875 L 214 637.96875" p="ec6cf7cd8dad961d" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_e80b8849e12b691e" d="M 356.6875 637.96875 L 375 637.96875 L 375 590.375 A 4 4 0 0 1 379 586.375 L 392.6875 586.375" p="b6decff382c8e8eb" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_93d8e7699828b34e" d="M 434.6875 586.375 L 453 586.375 L 453 586.375 L 470.6875 586.375" p="e80b8849e12b691e" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_672fc72ed7b8f60c" d="M 356.6875 637.96875 L 375 637.96875 L 375 744.171875 A 4 4 0 0 0 379 748.171875 L 392.6875 748.171875" p="b6decff382c8e8eb" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_e8eee4628d5c334e" d="M 434.6875 748.171875 L 453 748.171875 L 453 748.171875 L 470.6875 748.171875" p="672fc72ed7b8f60c" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_973c2790e213363c" d="M 356.6875 637.96875 L 375 637.96875 L 375 795.765625 A 4 4 0 0 0 379 799.765625 L 392.6875 799.765625" p="b6decff382c8e8eb" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path><path id="line_1df1a4f6d743ffc5" d="M 460.6875 799.765625 L 479 799.765625 L 479 799.765625 L 496.6875 799.765625" p="973c2790e213363c" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(242, 378)" id="sdjakdjak1"><g id="subline_494c68b61e12db31" transform="translate(0.5, 0.5)"><path id="line_f91793a4f53cf786" d="M 430 15.796875 L 448 15.796875 L 448 15.796875 L 466 15.796875" p="494c68b61e12db31" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(242, 326)" id="sdjakdjak2"><g id="subline_d41278eccfd5d3b4" transform="translate(0.5, 0.5)"></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(242, 30)" id="sdjakdjak3"><g id="subline_9e90b1e934cd5d38" transform="translate(0.5, 0.5)"><path id="line_5ffa2de8ec7b6375" d="M 52 138 L 70 138 L 70 138 L 88 138" p="9e90b1e934cd5d38" stroke="#6C8C78" fill="none" stroke-linecap="square" stroke-width="2"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(30, 615.5)" id="sdjakdjak4"><g id="subline_root" transform="translate(0.5, 0.5)"></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g id="root"><rect x="30" y="615.5" rx="6px" ry="6px" width="152" height="50" style="fill: #6C8C78; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="20px" font-weight="normal" fill="rgb(255, 255, 255)" style="font-size:20px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#ffffff;font-style:normal;text-align:left;font-weight:normal;"><tspan x="46" y="646"><tspan dx="0">对象访问定位</tspan></tspan></text></g></g></svg>