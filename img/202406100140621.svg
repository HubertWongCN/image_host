<svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" id="mind-svg-con" version="1.1" width="2214.921875px" height="764px" style="position: absolute; left: 0px; top: 0px; width: 2214.92px; height: 764px; background: rgb(255, 255, 255); z-index: 999;"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="2214.921875" height="764" fill="#FFFFFF"></rect></g><g transform="translate(-8938.7421875, -9540)" id="sdjakdjak6"><defs></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_c2e689d37cb5262b" d="M 10000 9936 L 10082.5 9936 C 10122.5 9936 10122.5 9758.80859375 10187.5 9758.80859375 L 10187.5 9758.80859375 L 10338.2421875 9758.80859375" stroke="#FCB52A" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_2ed7b5e5234f39b5" d="M 10000 9936 L 10082.5 9936 C 10122.5 9936 10122.5 9945.6953125 10187.5 9945.6953125 L 10187.5 9945.6953125 L 10350.6640625 9945.6953125" stroke="#7549C5" fill="none" stroke-width="3"></path><path part="right" sub="true" id="line_5f488bfb5a52ddc2" d="M 10000 9936 L 10082.5 9936 C 10122.5 9936 10122.5 10124.45703125 10187.5 10124.45703125 L 10187.5 10124.45703125 L 10394.8515625 10124.45703125" stroke="#3D5EC2" fill="none" stroke-width="3"></path><path part="left" sub="true" id="line_27cf79136ae3d7aa" d="M 10000 9936 L 9917.5 9936 C 9877.5 9936 9877.5 9828.80078125 9811.5 9828.80078125 L 9811.5 9828.80078125 L 9679.4375 9828.80078125" stroke="#BE49C4" fill="none" stroke-width="3"></path><path part="left" sub="true" id="line_ccba6308678526ea" d="M 10000 9936 L 9917.5 9936 C 9877.5 9936 9877.5 10195.95703125 9811.5 10195.95703125 L 9811.5 10195.95703125 L 9692.828125 10195.95703125" stroke="#FA5465" fill="none" stroke-width="3"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g><g class="svg-freebos-con" transform="translate(0.5,0.5)"></g></g><g id="5f488bfb5a52ddc2"><rect x="1248.7578125" y="551.9140625" rx="1px" ry="1px" width="207" height="33" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;"><tspan x="1263" y="573"><tspan>ReentrantReadWriteLock</tspan></tspan></text></g><line x1="1248.7578125" y1="585" x2="1455.7578125" y2="585" style="stroke:rgb(61, 94, 194);stroke-width:3"></line></g><g id="a939bdb0f699e78b"><rect x="1532.109375" y="488" rx="1px" ry="1px" width="432" height="63" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1541" y="506"><tspan>Java 的并发包提供了读写锁 ReentrantReadWriteLock，它表示两个锁，</tspan></tspan><tspan x="1541" y="524.2"><tspan style="font-weight:bolder;">·</tspan><tspan>  一个是读操作相关的锁，称为共享锁；</tspan></tspan><tspan x="1541" y="542.4000000000001"><tspan style="font-weight:bolder;">·</tspan><tspan>  一个是写相关的锁，称为排他锁</tspan></tspan></text></g></g><g id="bd83fceb5fa783ef"><rect x="1532.109375" y="567.5859375" rx="1px" ry="1px" width="502" height="81" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1541" y="586"><tspan style="font-size:inherit;">读写锁有以下三个重要的特征：</tspan></tspan><tspan x="1541" y="604.2"><tspan>1. </tspan><tspan style="font-size:inherit;">公平选择性：支持非公平(默认)和公平的锁获取方式，吞吐量还是非公平优于公平</tspan></tspan><tspan x="1541" y="622.4000000000001"><tspan>2. 重入：读锁和写锁都支持线程重入</tspan></tspan><tspan x="1541" y="640.6000000000001"><tspan>3. 锁降级：遵循获取写锁、获取读锁再释放锁的次序，写锁能够降级称为读锁</tspan></tspan></text></g></g><g id="2ed7b5e5234f39b5"><rect x="1248.7578125" y="373.1484375" rx="1px" ry="1px" width="163" height="33" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;"><tspan x="1263" y="394"><tspan>Semaphore 信号量</tspan></tspan></text></g><line x1="1248.7578125" y1="407" x2="1411.7578125" y2="407" style="stroke:rgb(117, 73, 197);stroke-width:3"></line></g><g id="32a287131f4bb2fa"><rect x="1487.921875" y="323" rx="1px" ry="1px" width="538" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1497" y="342"><tspan>又称为信号灯，在多线程环境下用于协调各个线程，以保证它们能够正确、合理的使用资源</tspan></tspan></text></g></g><g id="a1819480f4b9104b"><rect x="1487.921875" y="397.921875" rx="1px" ry="1px" width="70" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1497" y="417"><tspan>关键方法</tspan></tspan></text></g></g><g id="cbf74684b4b09ecb"><rect x="1633.921875" y="367.2265625" rx="1px" ry="1px" width="551" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1643" y="385"><tspan>acquire：线程通过 acquire() 方法获取到一个许可，然后对共享资源进行操作。</tspan></tspan><tspan x="1643" y="403.2"><tspan>许可集已分配完了，那么线程将进入等待状态，直到其他线程释放许可才有机会再获取许可。</tspan></tspan></text></g></g><g id="cc312064f4856f71"><rect x="1633.921875" y="428.6171875" rx="1px" ry="1px" width="352" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1643" y="448"><tspan>release：线程释放一个许可，许可将被归还给 Semaphore</tspan></tspan></text></g></g><g id="c2e689d37cb5262b"><rect x="1248.7578125" y="186.265625" rx="1px" ry="1px" width="151" height="33" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;"><tspan x="1263" y="207"><tspan>CountDownLatch</tspan></tspan></text></g><line x1="1248.7578125" y1="220" x2="1399.7578125" y2="220" style="stroke:rgb(252, 181, 42);stroke-width:3"></line></g><g id="fac1a1200c0ea0cc"><rect x="1475.5" y="114" rx="1px" ry="1px" width="529" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1485" y="132"><tspan>通过一个计数器来实现，计数器的初始值是线程的数量。</tspan></tspan><tspan x="1485" y="150.2"><tspan>每当线程执行完毕后，计数器的值就 -1，当计数器的值为 0 时，表示所有线程都执行完毕</tspan></tspan></text></g></g><g id="2cb768021ad11d10"><rect x="1475.5" y="175.390625" rx="1px" ry="1px" width="495" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1485" y="194"><tspan>await()：调用 await() 方法的线程会被挂起，它会等待直到 count 值为 0 才继续执行</tspan></tspan></text></g></g><g id="d4064b016235105e"><rect x="1475.5" y="219.6171875" rx="1px" ry="1px" width="537" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1485" y="239"><tspan>await(long timeout, TimeUnit unit)：等待一定时间后 count 值还没变为 0 的话就会继续执行</tspan></tspan></text></g></g><g id="3d8ab0e9ef89eb2c"><rect x="1475.5" y="263.84375" rx="1px" ry="1px" width="185" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="1485" y="283"><tspan>countDown()：将 count 值 -1</tspan></tspan></text></g></g><g id="412962bd3370f236"><rect x="67.3515625" y="547" rx="1px" ry="1px" width="612" height="63" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="76" y="565"><tspan>CycliBarrier 类似于 CountDownLatch，它能阻塞一组线程直到某个事件的发生。</tspan></tspan><tspan x="76" y="583.2"><tspan>CycliBarrier 与 CountDownLatch 的关键区别在于，所有的线程必须同时到达栅栏位置，才能继续执行。</tspan></tspan><tspan x="76" y="601.4000000000001"><tspan>CountDownLatch 用于等待事件，而 CycliBarrier 用于等待其他线程</tspan></tspan></text></g></g><g id="b8bb34748f53a6ca"><rect x="184.3828125" y="626.5859375" rx="1px" ry="1px" width="495" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="193" y="645"><tspan>await：await 方法的线程告诉 CycliBarrier 自己已经达到同步点，然后当前线程阻塞</tspan></tspan><tspan x="193" y="663.2"><tspan>CycliBarrier 同样提供带超时时间的 await 和不带超时时间的 await 方法</tspan></tspan></text></g></g><g id="355370ed0a889a80"><rect x="409.6796875" y="687.9765625" rx="1px" ry="1px" width="269" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="419" y="706"><tspan>CountDownLatch 基于AQS 的共享模式使用</tspan></tspan><tspan x="419" y="724.2"><tspan>CyclicBarrier 基于 Condition 来实现的</tspan></tspan></text></g></g><g id="ccba6308678526ea"><rect x="755.0859375" y="623.4140625" rx="1px" ry="1px" width="119" height="33" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;"><tspan x="769" y="645"><tspan>CyclicBarrier</tspan></tspan></text></g><line x1="755.0859375" y1="657" x2="874.0859375" y2="657" style="stroke:rgb(250, 84, 101);stroke-width:3"></line></g><g id="8cbe8efabd1c8d6d"><rect x="283.53125" y="30" rx="1px" ry="1px" width="262" height="63" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="293" y="48"><tspan>与 synchronized 的对比：</tspan></tspan><tspan x="293" y="66.2"><tspan>synchronized 获取锁无法设置超时；</tspan></tspan><tspan x="293" y="84.4"><tspan>ReentrantLock 可以设置获取锁的超时时间</tspan></tspan></text></g></g><g id="6d88079a3ac5bd1b"><rect x="352.140625" y="109.5859375" rx="1px" ry="1px" width="194" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="361" y="128"><tspan>synchronized 无法实现公平锁</tspan></tspan><tspan x="361" y="146.2"><tspan>ReentrantLock可以实现公平锁</tspan></tspan></text></g></g><g id="d4039ed2b0584d6c"><rect x="30" y="170.9765625" rx="1px" ry="1px" width="516" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="39" y="189"><tspan>synchronized 是 Java 中的关键字，无法提供外部方法，使用的都是 Object 类的方法；</tspan></tspan><tspan x="39" y="207.2"><tspan>ReentrantLock 是 JUC 中锁的一种实现，提供的方法稍微多一些</tspan></tspan></text></g></g><g id="5b4d531f0a5e9081"><rect x="156.3828125" y="232.3671875" rx="1px" ry="1px" width="389" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="165" y="250"><tspan>synchronized 在加锁代码块执行完或者出现异常，自动释放锁；</tspan></tspan><tspan x="165" y="268.2"><tspan>ReentrantLock 不会自动释放锁，需要在 finally{} 代码块显示释放</tspan></tspan></text></g></g><g id="8988eee893118cf0"><rect x="621.6953125" y="139.765625" rx="1px" ry="1px" width="44" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="631" y="159"><tspan>对比</tspan></tspan></text></g></g><g id="8dc5692359edcc33"><rect x="40.7890625" y="293.7578125" rx="1px" ry="1px" width="291" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="50" y="313"><tspan>每个线程公平的获取锁，不会出现线程饥饿情况</tspan></tspan></text></g></g><g id="4feffd0a94d5525f"><rect x="407.7890625" y="293.7578125" rx="1px" ry="1px" width="125" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="417" y="313"><tspan>非公平锁 FairSync</tspan></tspan></text></g></g><g id="47bf02903ccb8d57"><rect x="68.9453125" y="337.984375" rx="1px" ry="1px" width="239" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="78" y="357"><tspan>抢占式获取锁，容易出现线程饥饿情况</tspan></tspan></text></g></g><g id="379781f23a45ec73"><rect x="383.9453125" y="337.984375" rx="1px" ry="1px" width="149" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="393" y="357"><tspan>非公平锁 NonFairSync</tspan></tspan></text></g></g><g id="7416568c92f4e6f6"><rect x="608.6953125" y="315.8671875" rx="1px" ry="1px" width="57" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="618" y="335"><tspan>锁实现</tspan></tspan></text></g></g><g id="e8e161c8ec8210b2"><rect x="394.765625" y="382.2109375" rx="1px" ry="1px" width="122" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="404" y="401"><tspan>多线程协调通讯类</tspan></tspan></text></g></g><g id="80f040e7cb62ea06"><rect x="30.765625" y="426.4375" rx="1px" ry="1px" width="486" height="44" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="40" y="444"><tspan>Condition 维护了一个线程等待队列，也是多线程协调通信的工具类</tspan></tspan><tspan x="40" y="462.2"><tspan>使得某个线程一起等待某个条件，满足条件才能唤醒，唤醒后，还需要重新竞争锁</tspan></tspan></text></g></g><g id="c387e39a12b346d4"><rect x="273.3359375" y="487.828125" rx="1px" ry="1px" width="243" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="282" y="507"><tspan>ReentrantLock 与 Conditon 一起实现了</tspan></tspan></text></g></g><g id="5d926c4791495ec7"><rect x="592.765625" y="435.015625" rx="1px" ry="1px" width="73" height="27" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="400" fill="rgb(13, 11, 34)" style="font-size:13px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:400;"><tspan x="602" y="454"><tspan>Condition</tspan></tspan></text></g></g><g id="27cf79136ae3d7aa"><rect x="741.6953125" y="256.2578125" rx="1px" ry="1px" width="132" height="33" style="fill: transparent; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="16px" font-weight="normal" fill="rgb(13, 11, 34)" style="font-size:16px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#0D0B22;font-style:normal;text-align:left;font-weight:normal;"><tspan x="756" y="277"><tspan>ReentrantLock</tspan></tspan></text></g><line x1="741.6953125" y1="290" x2="873.6953125" y2="290" style="stroke:rgb(190, 73, 196);stroke-width:3"></line></g><g transform="translate(1248.7578125, 488)" id="sdjakdjak0"><g id="subline_5f488bfb5a52ddc2" transform="translate(0.5, 0.5)"><path id="line_a939bdb0f699e78b" d="M 207.3515625 96.45703125 C 253.3515625 96.45703125 245.3515625 62.5859375 283.3515625 62.5859375 L 715.3515625 62.5859375" p="5f488bfb5a52ddc2" stroke="#3D5EC2" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_bd83fceb5fa783ef" d="M 207.3515625 96.45703125 C 253.3515625 96.45703125 245.3515625 160.3671875 283.3515625 160.3671875 L 785.3515625 160.3671875" p="5f488bfb5a52ddc2" stroke="#3D5EC2" fill="none" stroke-linecap="square" stroke-width="3"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(1248.7578125, 323)" id="sdjakdjak1"><g id="subline_2ed7b5e5234f39b5" transform="translate(0.5, 0.5)"><path id="line_32a287131f4bb2fa" d="M 163.1640625 82.6953125 C 209.1640625 82.6953125 201.1640625 27.2265625 239.1640625 27.2265625 L 777.1640625 27.2265625" p="2ed7b5e5234f39b5" stroke="#7549C5" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_a1819480f4b9104b" d="M 163.1640625 82.6953125 C 209.1640625 82.6953125 201.1640625 102.1484375 239.1640625 102.1484375 L 309.1640625 102.1484375" p="2ed7b5e5234f39b5" stroke="#7549C5" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_cbf74684b4b09ecb" d="M 309.1640625 102.1484375 C 355.1640625 102.1484375 347.1640625 88.6171875 385.1640625 88.6171875 L 936.1640625 88.6171875" p="a1819480f4b9104b" stroke="#7549C5" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_cc312064f4856f71" d="M 309.1640625 102.1484375 C 355.1640625 102.1484375 347.1640625 132.84375 385.1640625 132.84375 L 737.1640625 132.84375" p="a1819480f4b9104b" stroke="#7549C5" fill="none" stroke-linecap="square" stroke-width="3"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(1248.7578125, 114)" id="sdjakdjak2"><g id="subline_c2e689d37cb5262b" transform="translate(0.5, 0.5)"><path id="line_fac1a1200c0ea0cc" d="M 150.7421875 104.80859375 C 196.7421875 104.80859375 188.7421875 44.390625 226.7421875 44.390625 L 755.7421875 44.390625" p="c2e689d37cb5262b" stroke="#FCB52A" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_2cb768021ad11d10" d="M 150.7421875 104.80859375 C 196.7421875 104.80859375 188.7421875 88.6171875 226.7421875 88.6171875 L 721.7421875 88.6171875" p="c2e689d37cb5262b" stroke="#FCB52A" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_d4064b016235105e" d="M 150.7421875 104.80859375 C 196.7421875 104.80859375 188.7421875 132.84375 226.7421875 132.84375 L 763.7421875 132.84375" p="c2e689d37cb5262b" stroke="#FCB52A" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_3d8ab0e9ef89eb2c" d="M 150.7421875 104.80859375 C 196.7421875 104.80859375 188.7421875 177.0703125 226.7421875 177.0703125 L 411.7421875 177.0703125" p="c2e689d37cb5262b" stroke="#FCB52A" fill="none" stroke-linecap="square" stroke-width="3"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(67.3515625, 547)" id="sdjakdjak3"><g id="subline_ccba6308678526ea" transform="translate(0.5, 0.5)"><path id="line_412962bd3370f236" d="M 687.328125 108.95703125 C 642 108.95703125 649.6640625 62.5859375 612 62.5859375 L 0 62.5859375" p="ccba6308678526ea" stroke="#FA5465" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_b8bb34748f53a6ca" d="M 687.328125 108.95703125 C 642.03125 108.95703125 649.6796875 123.9765625 612.03125 123.9765625 L 117.03125 123.9765625" p="ccba6308678526ea" stroke="#FA5465" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_355370ed0a889a80" d="M 687.328125 108.95703125 C 641.328125 108.95703125 649.328125 185.3671875 611.328125 185.3671875 L 342.328125 185.3671875" p="ccba6308678526ea" stroke="#FA5465" fill="none" stroke-linecap="square" stroke-width="3"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(30, 30)" id="sdjakdjak4"><g id="subline_27cf79136ae3d7aa" transform="translate(0.5, 0.5)"><path id="line_8988eee893118cf0" d="M 711.9375 258.80078125 C 665.6953125 258.80078125 673.81640625 136.9921875 635.6953125 136.9921875 L 591.6953125 136.9921875" p="27cf79136ae3d7aa" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_8cbe8efabd1c8d6d" d="M 591.6953125 136.9921875 C 545.53125 136.9921875 553.61328125 62.5859375 515.53125 62.5859375 L 253.53125 62.5859375" p="8988eee893118cf0" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_6d88079a3ac5bd1b" d="M 591.6953125 136.9921875 C 546.140625 136.9921875 553.91796875 123.9765625 516.140625 123.9765625 L 322.140625 123.9765625" p="8988eee893118cf0" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_d4039ed2b0584d6c" d="M 591.6953125 136.9921875 C 546 136.9921875 553.84765625 185.3671875 516 185.3671875 L 0 185.3671875" p="8988eee893118cf0" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_5b4d531f0a5e9081" d="M 591.6953125 136.9921875 C 545.3828125 136.9921875 553.5390625 246.7578125 515.3828125 246.7578125 L 126.3828125 246.7578125" p="8988eee893118cf0" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_7416568c92f4e6f6" d="M 711.9375 258.80078125 C 665.6953125 258.80078125 673.81640625 313.09375 635.6953125 313.09375 L 578.6953125 313.09375" p="27cf79136ae3d7aa" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_4feffd0a94d5525f" d="M 578.6953125 313.09375 C 532.7890625 313.09375 540.7421875 290.984375 502.7890625 290.984375 L 377.7890625 290.984375" p="7416568c92f4e6f6" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_8dc5692359edcc33" d="M 377.7890625 290.984375 C 331.7890625 290.984375 339.7890625 290.984375 301.7890625 290.984375 L 10.7890625 290.984375" p="4feffd0a94d5525f" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_379781f23a45ec73" d="M 578.6953125 313.09375 C 532.9453125 313.09375 540.8203125 335.2109375 502.9453125 335.2109375 L 353.9453125 335.2109375" p="7416568c92f4e6f6" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_47bf02903ccb8d57" d="M 353.9453125 335.2109375 C 307.9453125 335.2109375 315.9453125 335.2109375 277.9453125 335.2109375 L 38.9453125 335.2109375" p="379781f23a45ec73" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_5d926c4791495ec7" d="M 711.9375 258.80078125 C 665.765625 258.80078125 673.8515625 432.2421875 635.765625 432.2421875 L 562.765625 432.2421875" p="27cf79136ae3d7aa" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_e8e161c8ec8210b2" d="M 562.765625 432.2421875 C 516.765625 432.2421875 524.765625 379.4375 486.765625 379.4375 L 364.765625 379.4375" p="5d926c4791495ec7" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_80f040e7cb62ea06" d="M 562.765625 432.2421875 C 516.765625 432.2421875 524.765625 440.828125 486.765625 440.828125 L 0.765625 440.828125" p="5d926c4791495ec7" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path><path id="line_c387e39a12b346d4" d="M 562.765625 432.2421875 C 516.3359375 432.2421875 524.55078125 485.0546875 486.3359375 485.0546875 L 243.3359375 485.0546875" p="5d926c4791495ec7" stroke="#BE49C4" fill="none" stroke-linecap="square" stroke-width="3"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(973.7578125, 362)" id="sdjakdjak5"><g id="subline_root" transform="translate(0.5, 0.5)"></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g id="root"><rect x="973.7578125" y="362" rx="7px" ry="7px" width="175" height="68" style="fill: #ffffff; stroke:none;stroke-width:0px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="24px" font-weight="normal" fill="rgb(42, 46, 54)" style="font-size:24px;font-family:'Microsoft YaHei',微软雅黑,Arial;color:#2A2E36;font-style:normal;text-align:left;font-weight:normal;"><tspan x="1012" y="404"><tspan>AQS框架</tspan></tspan></text></g></g></svg>